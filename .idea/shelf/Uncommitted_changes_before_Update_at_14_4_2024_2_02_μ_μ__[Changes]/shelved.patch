Index: resources/views/users/login.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\nsession_start();\r\n\r\n// Check if the user is already logged in, redirect to home page if they are\r\nif (isset($_SESSION['user_id'])) {\r\n    header(\"Location: ./../../../index.php\");\r\n    exit;\r\n}\r\n\r\nrequire_once '../../controllers/LoginController.php';\r\n\r\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\r\n    // Validate form data\r\n    $email = filter_var($_POST['email'], FILTER_SANITIZE_EMAIL);\r\n    $password = $_POST['password'];\r\n\r\n    // Instantiate the controller and attempt to login\r\n    $loginController = new LoginController();\r\n    $userId = $loginController->loginUser($email, $password);\r\n\r\n    if ($userId) {\r\n        // Password is correct, create session for the user\r\n        $_SESSION['user_id'] = $userId;\r\n\r\n        // Redirect to home page\r\n        header(\"Location: ./../../../index.php\");\r\n        exit;\r\n    } else {\r\n        // Password is incorrect or user not found\r\n        $error = \"Invalid email or password. Please try again.\";\r\n    }\r\n}\r\n?>\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>MovieRama - Login</title>\r\n    <link rel=\"stylesheet\" href=\"/public/assets/css/bootstrap.min.css\">\r\n    <style>\r\n        /* Center the container */\r\n        .container {\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            height: 100vh;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<div class=\"container\">\r\n    <div class=\"card\">\r\n        <div class=\"card-body\">\r\n            <h1 class=\"card-title mb-4\">Login</h1>\r\n            <?php if (!empty($error)): ?>\r\n                <div class=\"alert alert-danger\" role=\"alert\">\r\n                    <?php echo $error; ?>\r\n                </div>\r\n            <?php endif; ?>\r\n            <form action=\"\" method=\"post\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"email\">Email</label>\r\n                    <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" required>\r\n                </div>\r\n                <div class=\"form-group\">\r\n                    <label for=\"password\">Password</label>\r\n                    <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" required>\r\n                </div>\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                    <button type=\"submit\" class=\"btn btn-primary\">Login</button>\r\n                    <a href=\"/index.php\" class=\"btn btn-secondary\">Back</a> <!-- Move back button here -->\r\n                </div>\r\n            </form>\r\n        </div>\r\n    </div>\r\n</div>\r\n</body>\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/views/users/login.php b/resources/views/users/login.php
--- a/resources/views/users/login.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/resources/views/users/login.php	(date 1713092538255)
@@ -1,7 +1,6 @@
 <?php
 session_start();
 
-// Check if the user is already logged in, redirect to home page if they are
 if (isset($_SESSION['user_id'])) {
     header("Location: ./../../../index.php");
     exit;
@@ -10,23 +9,18 @@
 require_once '../../controllers/LoginController.php';
 
 if ($_SERVER['REQUEST_METHOD'] === 'POST') {
-    // Validate form data
     $email = filter_var($_POST['email'], FILTER_SANITIZE_EMAIL);
     $password = $_POST['password'];
 
-    // Instantiate the controller and attempt to login
     $loginController = new LoginController();
     $userId = $loginController->loginUser($email, $password);
 
     if ($userId) {
-        // Password is correct, create session for the user
         $_SESSION['user_id'] = $userId;
 
-        // Redirect to home page
         header("Location: ./../../../index.php");
         exit;
     } else {
-        // Password is incorrect or user not found
         $error = "Invalid email or password. Please try again.";
     }
 }
Index: resources/views/users/logout.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\nrequire_once '../../controllers/LogoutController.php';\r\n\r\n// Instantiate the controller\r\n$logoutController = new LogoutController();\r\n\r\n// Check if the logout button is clicked\r\nif ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['logout'])) {\r\n    // Logout the user\r\n    $logoutController->logoutUser();\r\n}\r\n\r\n?>\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>MovieRama - Logout</title>\r\n    <link rel=\"stylesheet\" href=\"/public/assets/css/bootstrap.min.css\">\r\n</head>\r\n<body>\r\n<div class=\"container mt-5\">\r\n    <h1 class=\"mb-3\">Logout</h1>\r\n    <form action=\"\" method=\"post\">\r\n        <p>Are you sure you want to logout?</p>\r\n        <button type=\"submit\" class=\"btn btn-primary\" name=\"logout\">Logout</button>\r\n    </form>\r\n</div>\r\n</body>\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/views/users/logout.php b/resources/views/users/logout.php
--- a/resources/views/users/logout.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/resources/views/users/logout.php	(date 1713092538259)
@@ -1,12 +1,9 @@
 <?php
 require_once '../../controllers/LogoutController.php';
 
-// Instantiate the controller
 $logoutController = new LogoutController();
 
-// Check if the logout button is clicked
 if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['logout'])) {
-    // Logout the user
     $logoutController->logoutUser();
 }
 
Index: resources/views/users/register.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\nrequire_once '../../controllers/RegisterController.php';\r\n\r\n// Instantiate the controller\r\n$registerController = new RegisterController();\r\n\r\n// Initialize error variable\r\n$error = \"\";\r\n\r\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\r\n    // Validate and sanitize form data\r\n    $name = filter_var($_POST['name'], FILTER_SANITIZE_STRING);\r\n    $email = filter_var($_POST['email'], FILTER_SANITIZE_EMAIL);\r\n    $password = $_POST['password'];\r\n    $confirmPassword = $_POST['confirm_password'];\r\n\r\n    // Check if email is valid\r\n    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {\r\n        $error = \"Invalid email format. Please enter a valid email.\";\r\n    } elseif ($password !== $confirmPassword) {\r\n        // Check if passwords match\r\n        $error = \"Passwords do not match. Please make sure your passwords match.\";\r\n    } elseif (strlen($password) < 8 || !preg_match(\"#[A-Z]+#\", $password) || !preg_match(\"#[a-z]+#\", $password) || !preg_match(\"#[0-9]+#\", $password) || !preg_match(\"#\\W+#\", $password)) {\r\n        // Check if password meets complexity requirements\r\n        $error = \"Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.\";\r\n    } else {\r\n        // Attempt to register the user\r\n        if ($registerController->registerUser($name, $email, $password)) {\r\n            // Registration successful\r\n            // Redirect to login page\r\n            header(\"Location: login.php\");\r\n            exit;\r\n        } else {\r\n            // Registration failed\r\n            $error = \"Registration failed. Please try again.\";\r\n        }\r\n    }\r\n}\r\n\r\n?>\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>MovieRama - Register</title>\r\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\r\n    <style>\r\n        body {\r\n            background-color: #f8f9fa;\r\n        }\r\n        .registration-form {\r\n            background-color: #ffffff;\r\n            border: 1px solid #dee2e6;\r\n            border-radius: 10px;\r\n            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);\r\n            padding: 40px;\r\n            margin-top: 100px;\r\n            max-width: 400px;\r\n            margin-left: auto;\r\n            margin-right: auto;\r\n        }\r\n        .registration-form h1 {\r\n            text-align: center;\r\n            color: #333333;\r\n        }\r\n        .registration-form label {\r\n            font-weight: bold;\r\n        }\r\n        .registration-form .btn-primary {\r\n            background-color: #007bff;\r\n            border-color: #007bff;\r\n            width: 48%; /* Adjusted width for both buttons */\r\n        }\r\n        .registration-form .btn-secondary {\r\n            background-color: #6c757d;\r\n            border-color: #6c757d;\r\n            width: 48%; /* Adjusted width for both buttons */\r\n        }\r\n        .registration-form .btn-primary:hover {\r\n            background-color: #0056b3;\r\n            border-color: #0056b3;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<div class=\"container\">\r\n    <div class=\"registration-form\">\r\n        <h1 class=\"mb-4\">Register</h1>\r\n        <?php if (!empty($error)): ?>\r\n            <div class=\"alert alert-danger\" role=\"alert\">\r\n                <?php echo $error; ?>\r\n            </div>\r\n        <?php endif; ?>\r\n        <form action=\"\" method=\"post\">\r\n            <div class=\"form-group\">\r\n                <label for=\"name\">Name</label>\r\n                <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" required>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"email\">Email</label>\r\n                <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" required>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"password\">Password</label>\r\n                <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" required>\r\n            </div>\r\n            <div class=\"form-group\">\r\n                <label for=\"confirm_password\">Confirm Password</label>\r\n                <input type=\"password\" class=\"form-control\" id=\"confirm_password\" name=\"confirm_password\" required>\r\n            </div>\r\n            <div class=\"d-flex justify-content-between align-items-center\">\r\n                <button type=\"submit\" class=\"btn btn-primary btn-block\">Register</button>\r\n                <a href=\"../../../index.php\" class=\"btn btn-secondary btn-block\">Back</a> <!-- Back button -->\r\n            </div>\r\n        </form>\r\n    </div>\r\n</div>\r\n</body>\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/views/users/register.php b/resources/views/users/register.php
--- a/resources/views/users/register.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/resources/views/users/register.php	(date 1713092538212)
@@ -1,10 +1,8 @@
 <?php
 require_once '../../controllers/RegisterController.php';
 
-// Instantiate the controller
 $registerController = new RegisterController();
 
-// Initialize error variable
 $error = "";
 
 if ($_SERVER['REQUEST_METHOD'] === 'POST') {
Index: resources/views/movies/add.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\nsession_start();\r\n\r\n// Check if the user is logged in\r\n$loggedIn = isset($_SESSION['user_id']);\r\n\r\n// Redirect if user is not logged in\r\nif (!$loggedIn) {\r\n    header(\"Location: ../../resources/views/users/login.php\");\r\n    exit;\r\n}\r\n\r\nrequire_once '../../controllers/AddMovieController.php';\r\n\r\n// Handle form submission\r\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\r\n    // Get form data and sanitize inputs\r\n    $title = htmlspecialchars($_POST['title']);\r\n    $description = htmlspecialchars($_POST['description']);\r\n\r\n    // Get the user ID from the session\r\n    $userId = $_SESSION['user_id'];\r\n\r\n    // Instantiate the controller and add the movie\r\n    $controller = new AddMovieController();\r\n    $controller->addMovie($title, $description, $userId);\r\n\r\n    // Redirect the user after processing the form\r\n    header(\"Location: ./../../../index.php\"); // Redirect to success page or homepage\r\n    exit;\r\n}\r\n?>\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>MovieRama - Add Movie</title>\r\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\r\n</head>\r\n<body>\r\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n    <!-- Navbar content -->\r\n</nav>\r\n\r\n<div class=\"container mt-5\">\r\n    <h1 class=\"mb-3\">Add New Movie</h1>\r\n    <form action=\"\" method=\"post\">\r\n        <div class=\"form-group\">\r\n            <label for=\"title\">Title</label>\r\n            <input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\" required>\r\n        </div>\r\n        <div class=\"form-group\">\r\n            <label for=\"description\">Description</label>\r\n            <textarea class=\"form-control\" id=\"description\" name=\"description\" rows=\"3\" required></textarea>\r\n        </div>\r\n        <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\r\n    </form>\r\n</div>\r\n\r\n<!-- JavaScript libraries -->\r\n<script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\r\n<script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js\"></script>\r\n<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/views/movies/add.php b/resources/views/movies/add.php
--- a/resources/views/movies/add.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/resources/views/movies/add.php	(date 1713092538236)
@@ -14,18 +14,14 @@
 
 // Handle form submission
 if ($_SERVER['REQUEST_METHOD'] === 'POST') {
-    // Get form data and sanitize inputs
     $title = htmlspecialchars($_POST['title']);
     $description = htmlspecialchars($_POST['description']);
 
-    // Get the user ID from the session
     $userId = $_SESSION['user_id'];
 
-    // Instantiate the controller and add the movie
     $controller = new AddMovieController();
     $controller->addMovie($title, $description, $userId);
 
-    // Redirect the user after processing the form
     header("Location: ./../../../index.php"); // Redirect to success page or homepage
     exit;
 }
Index: resources/views/movies/hate.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\nsession_start();\r\n\r\nif (!isset($_SESSION['user_id'])) {\r\n    // User is not logged in, handle this case accordingly (e.g., redirect to login page)\r\n    exit(\"User is not logged in\");\r\n}\r\n\r\nif (!isset($_POST['movie_id'])) {\r\n    exit(\"Movie ID is not provided\");\r\n}\r\n\r\nrequire_once '../../controllers/VoteController.php';\r\n\r\n// Retrieve user ID and movie ID from POST data\r\n$userId = $_SESSION['user_id'];\r\n$movieId = $_POST['movie_id'];\r\n\r\n// Instantiate the controller and handle the vote\r\n$controller = new VoteController();\r\n$controller->handleVote($userId, $movieId,'hate');\r\n?>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/views/movies/hate.php b/resources/views/movies/hate.php
--- a/resources/views/movies/hate.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/resources/views/movies/hate.php	(date 1713092538221)
@@ -2,7 +2,6 @@
 session_start();
 
 if (!isset($_SESSION['user_id'])) {
-    // User is not logged in, handle this case accordingly (e.g., redirect to login page)
     exit("User is not logged in");
 }
 
@@ -12,11 +11,9 @@
 
 require_once '../../controllers/VoteController.php';
 
-// Retrieve user ID and movie ID from POST data
 $userId = $_SESSION['user_id'];
 $movieId = $_POST['movie_id'];
 
-// Instantiate the controller and handle the vote
 $controller = new VoteController();
 $controller->handleVote($userId, $movieId,'hate');
 ?>
Index: resources/views/movies/like.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\nsession_start();\r\n\r\nif (!isset($_SESSION['user_id'])) {\r\n    // User is not logged in, handle this case accordingly (e.g., redirect to login page)\r\n    exit(\"User is not logged in\");\r\n}\r\n\r\nif (!isset($_POST['movie_id'])) {\r\n    exit(\"Movie ID is not provided\");\r\n}\r\n\r\nrequire_once '../../controllers/VoteController.php';\r\n\r\n// Retrieve user ID and movie ID from POST data\r\n$userId = $_SESSION['user_id'];\r\n$movieId = $_POST['movie_id'];\r\n\r\n// Instantiate the controller and handle the vote\r\n$controller = new VoteController();\r\n$controller->handleVote($userId, $movieId, 'like');\r\n?>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/views/movies/like.php b/resources/views/movies/like.php
--- a/resources/views/movies/like.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/resources/views/movies/like.php	(date 1713092538209)
@@ -2,7 +2,6 @@
 session_start();
 
 if (!isset($_SESSION['user_id'])) {
-    // User is not logged in, handle this case accordingly (e.g., redirect to login page)
     exit("User is not logged in");
 }
 
@@ -12,11 +11,9 @@
 
 require_once '../../controllers/VoteController.php';
 
-// Retrieve user ID and movie ID from POST data
 $userId = $_SESSION['user_id'];
 $movieId = $_POST['movie_id'];
 
-// Instantiate the controller and handle the vote
 $controller = new VoteController();
 $controller->handleVote($userId, $movieId, 'like');
 ?>
Index: resources/views/movies/user_movies.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\nsession_start();\r\n\r\nif (!isset($_SESSION['user_id'])) {\r\n    // User is not logged in, handle this case accordingly (e.g., redirect to login page)\r\n    header(\"Location: /login.php\"); // Adjust the path if needed\r\n    exit();\r\n}\r\n\r\nrequire_once '../../controllers/UserMovieController.php';\r\n\r\n// Get the user ID from the session\r\n$userId = $_SESSION['user_id'];\r\n\r\n// Instantiate the controller and get user movies\r\n$controller = new UserMovieController();\r\n$movies = $controller->getUserMovies($userId);\r\n?>\r\n\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <title>User Movies</title>\r\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\r\n    <style>\r\n        body {\r\n            background-color: #f8f9fa;\r\n        }\r\n        .container {\r\n            margin-top: 50px;\r\n        }\r\n        /* Additional CSS styles as needed */\r\n        .movie-title {\r\n            font-size: 24px;\r\n            font-weight: bold;\r\n            color: #007bff;\r\n        }\r\n        .movie-details {\r\n            margin-top: 10px;\r\n            font-size: 16px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n<div class=\"container mt-5\">\r\n    <h1 class=\"mb-3\">Movies Created by User</h1>\r\n    <?php foreach ($movies as $movie): ?>\r\n        <div class=\"card mb-3\">\r\n            <div class=\"card-body\">\r\n                <h5 class=\"card-title movie-title\"><?php echo $movie['title']; ?></h5>\r\n                <p class=\"card-text movie-details\">\r\n                    Added <?php echo date('F j, Y, g:i a', strtotime($movie['date_added'])); ?> ago\r\n                </p>\r\n                <p class=\"card-text\"><?php echo $movie['description']; ?></p>\r\n            </div>\r\n        </div>\r\n    <?php endforeach; ?>\r\n    <a href=\"../../../index.php\" class=\"btn btn-primary\">Back to Homepage</a>\r\n</div>\r\n\r\n<!-- JavaScript libraries -->\r\n<script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script>\r\n<script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js\"></script>\r\n<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\r\n</body>\r\n</html>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/views/movies/user_movies.php b/resources/views/movies/user_movies.php
--- a/resources/views/movies/user_movies.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/resources/views/movies/user_movies.php	(date 1713092538248)
@@ -2,17 +2,14 @@
 session_start();
 
 if (!isset($_SESSION['user_id'])) {
-    // User is not logged in, handle this case accordingly (e.g., redirect to login page)
     header("Location: /login.php"); // Adjust the path if needed
     exit();
 }
 
 require_once '../../controllers/UserMovieController.php';
 
-// Get the user ID from the session
 $userId = $_SESSION['user_id'];
 
-// Instantiate the controller and get user movies
 $controller = new UserMovieController();
 $movies = $controller->getUserMovies($userId);
 ?>
Index: database/db.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n$servername = \"localhost\";\r\n$username = \"root\";\r\n$password = \"admin\";\r\n$db = \"moviesDB\";\r\n// Create connection\r\n$conn = mysqli_connect($servername, $username, $password,$db);\r\n// Check connection\r\nif (!$conn) {\r\n    die(\"Connection failed: \" . mysqli_connect_error());\r\n}\r\n?>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/database/db.php b/database/db.php
--- a/database/db.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/database/db.php	(date 1713092538224)
@@ -3,9 +3,9 @@
 $username = "root";
 $password = "admin";
 $db = "moviesDB";
-// Create connection
+
 $conn = mysqli_connect($servername, $username, $password,$db);
-// Check connection
+
 if (!$conn) {
     die("Connection failed: " . mysqli_connect_error());
 }
Index: resources/models/VoteModel.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nrequire_once __DIR__ . '/../../database/db.php'; // Adjust the path as needed\r\n\r\nclass VoteModel {\r\n    public function hasUserVoted($userId, $movieId, $voteType) {\r\n        global $conn;\r\n\r\n        // Check if the user has already voted for this movie\r\n        $stmt = $conn->prepare(\"SELECT * FROM user_votes WHERE user_id = ? AND movie_id = ? AND vote = ?\");\r\n        $stmt->bind_param(\"iis\", $userId, $movieId, $voteType);\r\n        $stmt->execute();\r\n        $result = $stmt->get_result();\r\n\r\n        return $result->num_rows > 0;\r\n    }\r\n\r\n    public function isUserMovieOwner($userId, $movieId) {\r\n        global $conn;\r\n\r\n        // Check if the movie belongs to the user\r\n        $stmt = $conn->prepare(\"SELECT * FROM movies WHERE id = ? AND user_id = ?\");\r\n        $stmt->bind_param(\"ii\", $movieId, $userId);\r\n        $stmt->execute();\r\n        $result = $stmt->get_result();\r\n\r\n        return $result->num_rows > 0;\r\n    }\r\n\r\n    public function addVote($userId, $movieId, $voteType) {\r\n        global $conn;\r\n\r\n        // Insert a new record into the user_votes table\r\n        $stmt = $conn->prepare(\"INSERT INTO user_votes (user_id, movie_id, vote) VALUES (?, ?, ?)\");\r\n        $stmt->bind_param(\"iis\", $userId, $movieId, $voteType);\r\n        $stmt->execute();\r\n    }\r\n}\r\n\r\n?>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/models/VoteModel.php b/resources/models/VoteModel.php
--- a/resources/models/VoteModel.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/resources/models/VoteModel.php	(date 1713092538252)
@@ -1,6 +1,6 @@
 <?php
 
-require_once __DIR__ . '/../../database/db.php'; // Adjust the path as needed
+require_once __DIR__ . '/../../database/db.php';
 
 class VoteModel {
     public function hasUserVoted($userId, $movieId, $voteType) {
@@ -30,7 +30,6 @@
     public function addVote($userId, $movieId, $voteType) {
         global $conn;
 
-        // Insert a new record into the user_votes table
         $stmt = $conn->prepare("INSERT INTO user_votes (user_id, movie_id, vote) VALUES (?, ?, ?)");
         $stmt->bind_param("iis", $userId, $movieId, $voteType);
         $stmt->execute();
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>This is an Simple Movie Rama app which was created for an interview process.\r\n\r\nSteps to run the app is:\r\n1)Download PHPStorm and install it\r\n2)Install latest version of mysql\r\n3)download and install aparch server and PHP 8.2 or use XAMMP\r\n4) Create database named \"moviesDB\" and execure the following script\r\n\r\n-- moviesdb.movies definition\r\n\r\nCREATE TABLE `movies` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `title` varchar(255) NOT NULL,\r\n  `description` text NOT NULL,\r\n  `user_id` int NOT NULL,\r\n  `date_added` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n  `likes` int DEFAULT '0',\r\n  `hates` int DEFAULT '0',\r\n  PRIMARY KEY (`id`),\r\n  KEY `user_id` (`user_id`),\r\n  CONSTRAINT `movies_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\r\n\r\n-- moviesdb.user_votes definition\r\n\r\nCREATE TABLE `user_votes` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `user_id` int DEFAULT NULL,\r\n  `movie_id` int DEFAULT NULL,\r\n  `vote` enum('like','hate') DEFAULT NULL,\r\n  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`id`),\r\n  KEY `user_id` (`user_id`),\r\n  KEY `movie_id` (`movie_id`),\r\n  CONSTRAINT `user_votes_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`),\r\n  CONSTRAINT `user_votes_ibfk_2` FOREIGN KEY (`movie_id`) REFERENCES `movies` (`id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=55 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\r\n\r\n-- moviesdb.users definition\r\n\r\nCREATE TABLE `users` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `name` varchar(255) NOT NULL,\r\n  `email` varchar(255) NOT NULL,\r\n  `password` varchar(255) NOT NULL,\r\n  `token` varchar(255) NOT NULL,\r\n  PRIMARY KEY (`id`),\r\n  UNIQUE KEY `email` (`email`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\r\n\r\n\r\n5) Run the app on localhost http://localhost:63342/TestMovieRama/index.php\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/README.md	(date 1713092538277)
@@ -1,52 +1,26 @@
-This is an Simple Movie Rama app which was created for an interview process.
-
-Steps to run the app is:
-1)Download PHPStorm and install it
-2)Install latest version of mysql
-3)download and install aparch server and PHP 8.2 or use XAMMP
-4) Create database named "moviesDB" and execure the following script
+MovieRama App
+Welcome to MovieRama, a simple movie review application created for an interview process.
 
--- moviesdb.movies definition
+Overview
+MovieRama allows users to browse and review movies. Users can like or dislike movies, and their votes are counted to determine the popularity of each movie.
 
-CREATE TABLE `movies` (
-  `id` int NOT NULL AUTO_INCREMENT,
-  `title` varchar(255) NOT NULL,
-  `description` text NOT NULL,
-  `user_id` int NOT NULL,
-  `date_added` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
-  `likes` int DEFAULT '0',
-  `hates` int DEFAULT '0',
-  PRIMARY KEY (`id`),
-  KEY `user_id` (`user_id`),
-  CONSTRAINT `movies_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`)
-) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
+Prerequisites
+Before running the application, make sure you have the following installed on your system:
 
--- moviesdb.user_votes definition
+PHPStorm: Integrated Development Environment (IDE) for PHP.
+MySQL: Latest version of MySQL database.
+Apache Server or XAMPP: Apache web server with PHP 8.2 or higher.
+PHPUnit: PHP testing framework for unit testing.
+Installation and Setup
+Follow these steps to set up the MovieRama application:
 
-CREATE TABLE `user_votes` (
-  `id` int NOT NULL AUTO_INCREMENT,
-  `user_id` int DEFAULT NULL,
-  `movie_id` int DEFAULT NULL,
-  `vote` enum('like','hate') DEFAULT NULL,
-  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
-  PRIMARY KEY (`id`),
-  KEY `user_id` (`user_id`),
-  KEY `movie_id` (`movie_id`),
-  CONSTRAINT `user_votes_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`),
-  CONSTRAINT `user_votes_ibfk_2` FOREIGN KEY (`movie_id`) REFERENCES `movies` (`id`)
-) ENGINE=InnoDB AUTO_INCREMENT=55 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
+Clone the Repository: Clone this repository to your local machine.
 
--- moviesdb.users definition
+Configure IDE:
 
-CREATE TABLE `users` (
-  `id` int NOT NULL AUTO_INCREMENT,
-  `name` varchar(255) NOT NULL,
-  `email` varchar(255) NOT NULL,
-  `password` varchar(255) NOT NULL,
-  `token` varchar(255) NOT NULL,
-  PRIMARY KEY (`id`),
-  UNIQUE KEY `email` (`email`)
-) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;
+Open PHPStorm and configure it to listen to PHP or XAMPP in the bin/php.exe folder.
+Install PHPUnit and set up the IDE according to the PHPUnit installation instructions.
+Database Setup:
 
-
-5) Run the app on localhost http://localhost:63342/TestMovieRama/index.php
+Create a MySQL database named moviesDB.
+Execute the following SQL script to create the necessary tables:
\ No newline at end of file
Index: resources/models/LoginModel.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nrequire_once __DIR__ . '/../../database/db.php'; // Adjust the path as needed\r\n\r\nclass LoginModel {\r\n    public function loginUser($email, $password) {\r\n        global $conn;\r\n\r\n        // Retrieve user from database\r\n        $sql = \"SELECT id, password FROM users WHERE email = ?\";\r\n        $stmt = $conn->prepare($sql);\r\n        $stmt->bind_param(\"s\", $email);\r\n        $stmt->execute();\r\n        $result = $stmt->get_result();\r\n\r\n        if ($result->num_rows === 1) {\r\n            $user = $result->fetch_assoc();\r\n\r\n            // Verify password\r\n            if (password_verify($password, $user['password'])) {\r\n                // Password is correct, return user ID\r\n                return $user['id'];\r\n            }\r\n        }\r\n\r\n        // User not found or password incorrect\r\n        return false;\r\n    }\r\n}\r\n\r\n?>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/models/LoginModel.php b/resources/models/LoginModel.php
--- a/resources/models/LoginModel.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/resources/models/LoginModel.php	(date 1713092538204)
@@ -1,6 +1,6 @@
 <?php
 
-require_once __DIR__ . '/../../database/db.php'; // Adjust the path as needed
+require_once __DIR__ . '/../../database/db.php';
 
 class LoginModel {
     public function loginUser($email, $password) {
@@ -23,7 +23,6 @@
             }
         }
 
-        // User not found or password incorrect
         return false;
     }
 }
Index: resources/models/MovieModel.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nrequire_once __DIR__ . '/../../database/db.php'; // Adjust the path as needed\r\n\r\nclass MovieModel {\r\n    public function addMovie($title, $description, $userId) {\r\n        global $conn;\r\n\r\n        // Prepare and execute SQL INSERT query\r\n        $sql = \"INSERT INTO movies (title, description, user_id) VALUES (?, ?, ?)\";\r\n        $stmt = $conn->prepare($sql);\r\n        $stmt->bind_param(\"ssi\", $title, $description, $userId);\r\n        $stmt->execute();\r\n    }\r\n}\r\n\r\n?>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/models/MovieModel.php b/resources/models/MovieModel.php
--- a/resources/models/MovieModel.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/resources/models/MovieModel.php	(date 1713092538264)
@@ -1,12 +1,11 @@
 <?php
 
-require_once __DIR__ . '/../../database/db.php'; // Adjust the path as needed
+require_once __DIR__ . '/../../database/db.php';
 
 class MovieModel {
     public function addMovie($title, $description, $userId) {
         global $conn;
 
-        // Prepare and execute SQL INSERT query
         $sql = "INSERT INTO movies (title, description, user_id) VALUES (?, ?, ?)";
         $stmt = $conn->prepare($sql);
         $stmt->bind_param("ssi", $title, $description, $userId);
Index: resources/models/RegisterModel.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nrequire_once __DIR__ . '/../../database/db.php'; // Adjust the path as needed\r\n\r\nclass RegisterModel {\r\n    public function registerUser($name, $email, $password) {\r\n        global $conn;\r\n\r\n        // Hash the password\r\n        $hashedPassword = password_hash($password, PASSWORD_DEFAULT);\r\n\r\n        // Insert user into the database\r\n        $sql = \"INSERT INTO users (name, email, password) VALUES (?, ?, ?)\";\r\n        $stmt = $conn->prepare($sql);\r\n        $stmt->bind_param(\"sss\", $name, $email, $hashedPassword);\r\n\r\n        if ($stmt->execute()) {\r\n            // Registration successful\r\n            return true;\r\n        } else {\r\n            // Registration failed\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n?>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/models/RegisterModel.php b/resources/models/RegisterModel.php
--- a/resources/models/RegisterModel.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/resources/models/RegisterModel.php	(date 1713092538240)
@@ -1,24 +1,21 @@
 <?php
 
-require_once __DIR__ . '/../../database/db.php'; // Adjust the path as needed
+require_once __DIR__ . '/../../database/db.php';
 
 class RegisterModel {
     public function registerUser($name, $email, $password) {
         global $conn;
 
-        // Hash the password
+
         $hashedPassword = password_hash($password, PASSWORD_DEFAULT);
 
-        // Insert user into the database
         $sql = "INSERT INTO users (name, email, password) VALUES (?, ?, ?)";
         $stmt = $conn->prepare($sql);
         $stmt->bind_param("sss", $name, $email, $hashedPassword);
 
         if ($stmt->execute()) {
-            // Registration successful
             return true;
         } else {
-            // Registration failed
             return false;
         }
     }
Index: resources/models/UserMovieModel.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nrequire_once __DIR__ . '/../../database/db.php'; // Adjust the path as needed\r\n\r\nclass UserMovieModel {\r\n    public function getUserMovies($userId) {\r\n        global $conn;\r\n\r\n        // Fetch movies created by the specified user from the database\r\n        $sql = \"SELECT * FROM movies WHERE user_id = ?\";\r\n        $stmt = $conn->prepare($sql);\r\n        $stmt->bind_param(\"i\", $userId);\r\n        $stmt->execute();\r\n        $result = $stmt->get_result();\r\n\r\n        // Check if movies were fetched successfully\r\n        if ($result && $result->num_rows > 0) {\r\n            return $result->fetch_all(MYSQLI_ASSOC);\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n}\r\n\r\n?>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/models/UserMovieModel.php b/resources/models/UserMovieModel.php
--- a/resources/models/UserMovieModel.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/resources/models/UserMovieModel.php	(date 1713092538245)
@@ -1,19 +1,17 @@
 <?php
 
-require_once __DIR__ . '/../../database/db.php'; // Adjust the path as needed
+require_once __DIR__ . '/../../database/db.php';
 
 class UserMovieModel {
     public function getUserMovies($userId) {
         global $conn;
 
-        // Fetch movies created by the specified user from the database
         $sql = "SELECT * FROM movies WHERE user_id = ?";
         $stmt = $conn->prepare($sql);
         $stmt->bind_param("i", $userId);
         $stmt->execute();
         $result = $stmt->get_result();
 
-        // Check if movies were fetched successfully
         if ($result && $result->num_rows > 0) {
             return $result->fetch_all(MYSQLI_ASSOC);
         } else {
Index: resources/controllers/VoteController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nrequire_once __DIR__ . '/../models/VoteModel.php';\r\n\r\nclass VoteController {\r\n    public function handleVote($userId, $movieId, $voteType) {\r\n        // Instantiate the model\r\n        $voteModel = new VoteModel();\r\n\r\n        // Check if the user has already voted for this movie\r\n        if ($voteModel->hasUserVoted($userId, $movieId, $voteType)) {\r\n            exit(\"You have already voted for this movie\");\r\n        }\r\n\r\n        // Check if the movie belongs to the user\r\n        if ($voteModel->isUserMovieOwner($userId, $movieId)) {\r\n            exit(\"You cannot like a movie you have created\");\r\n        }\r\n\r\n        // Add the user's vote\r\n        $voteModel->addVote($userId, $movieId, $voteType);\r\n\r\n        // Return a success message\r\n        echo \"Movie liked successfully\";\r\n    }\r\n}\r\n\r\n?>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/controllers/VoteController.php b/resources/controllers/VoteController.php
--- a/resources/controllers/VoteController.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/resources/controllers/VoteController.php	(date 1713092538232)
@@ -4,23 +4,21 @@
 
 class VoteController {
     public function handleVote($userId, $movieId, $voteType) {
-        // Instantiate the model
         $voteModel = new VoteModel();
 
-        // Check if the user has already voted for this movie
+
         if ($voteModel->hasUserVoted($userId, $movieId, $voteType)) {
             exit("You have already voted for this movie");
         }
 
-        // Check if the movie belongs to the user
+
         if ($voteModel->isUserMovieOwner($userId, $movieId)) {
             exit("You cannot like a movie you have created");
         }
 
-        // Add the user's vote
+
         $voteModel->addVote($userId, $movieId, $voteType);
 
-        // Return a success message
         echo "Movie liked successfully";
     }
 }
Index: resources/controllers/LoginController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nrequire_once __DIR__ . '/../models/LoginModel.php';\r\n\r\nclass LoginController {\r\n    public function loginUser($email, $password) {\r\n        // Instantiate the model\r\n        $loginModel = new LoginModel();\r\n\r\n        // Login the user\r\n        return $loginModel->loginUser($email, $password);\r\n    }\r\n}\r\n\r\n?>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/controllers/LoginController.php b/resources/controllers/LoginController.php
--- a/resources/controllers/LoginController.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/resources/controllers/LoginController.php	(date 1713092538274)
@@ -4,10 +4,7 @@
 
 class LoginController {
     public function loginUser($email, $password) {
-        // Instantiate the model
         $loginModel = new LoginModel();
-
-        // Login the user
         return $loginModel->loginUser($email, $password);
     }
 }
Index: resources/controllers/LogoutController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nclass LogoutController {\r\n    public function logoutUser() {\r\n        // Destroy the session\r\n        session_start();\r\n        session_unset(); // Unset all session variables\r\n        session_destroy(); // Destroy the session\r\n\r\n        // Redirect to the login page\r\n        header(\"Location: ./../../../index.php\");\r\n        exit;\r\n    }\r\n}\r\n\r\n?>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/controllers/LogoutController.php b/resources/controllers/LogoutController.php
--- a/resources/controllers/LogoutController.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/resources/controllers/LogoutController.php	(date 1713092538200)
@@ -2,12 +2,10 @@
 
 class LogoutController {
     public function logoutUser() {
-        // Destroy the session
         session_start();
-        session_unset(); // Unset all session variables
-        session_destroy(); // Destroy the session
+        session_unset();
+        session_destroy();
 
-        // Redirect to the login page
         header("Location: ./../../../index.php");
         exit;
     }
Index: resources/controllers/AddMovieController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nrequire_once __DIR__ . '/../models/MovieModel.php';\r\n\r\nclass AddMovieController {\r\n    public function addMovie($title, $description, $userId) {\r\n        // Instantiate the model\r\n        $movieModel = new MovieModel();\r\n\r\n        // Call the model's method to add the movie\r\n        $movieModel->addMovie($title, $description, $userId);\r\n    }\r\n}\r\n\r\n?>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/controllers/AddMovieController.php b/resources/controllers/AddMovieController.php
--- a/resources/controllers/AddMovieController.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/resources/controllers/AddMovieController.php	(date 1713092538229)
@@ -4,10 +4,7 @@
 
 class AddMovieController {
     public function addMovie($title, $description, $userId) {
-        // Instantiate the model
         $movieModel = new MovieModel();
-
-        // Call the model's method to add the movie
         $movieModel->addMovie($title, $description, $userId);
     }
 }
Index: resources/controllers/RegisterController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nrequire_once __DIR__ . '/../models/RegisterModel.php';\r\n\r\nclass RegisterController {\r\n    public function registerUser($name, $email, $password) {\r\n        // Instantiate the model\r\n        $registerModel = new RegisterModel();\r\n\r\n        // Register the user\r\n        return $registerModel->registerUser($name, $email, $password);\r\n    }\r\n}\r\n\r\n?>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/controllers/RegisterController.php b/resources/controllers/RegisterController.php
--- a/resources/controllers/RegisterController.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/resources/controllers/RegisterController.php	(date 1713092538269)
@@ -4,10 +4,7 @@
 
 class RegisterController {
     public function registerUser($name, $email, $password) {
-        // Instantiate the model
         $registerModel = new RegisterModel();
-
-        // Register the user
         return $registerModel->registerUser($name, $email, $password);
     }
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"4af7b86c-05a0-4a39-90f5-50e2508fa1b2\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/src/bulma-stubs/bootstrap.js\" beforeDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ComposerSettings\" synchronizationState=\"SYNCHRONIZE\">\r\n    <pharConfigPath>$PROJECT_DIR$/composer.json</pharConfigPath>\r\n    <execution>\r\n      <phar pharPath=\"$PROJECT_DIR$/composer.phar\" interpreterId=\"4e1b234d-3a07-4f65-9d5a-5688a8141ab7\" />\r\n    </execution>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\"><![CDATA[{\r\n  \"lastFilter\": {\r\n    \"state\": \"OPEN\",\r\n    \"assignee\": \"vbantis\"\r\n  }\r\n}]]></component>\r\n  <component name=\"GithubPullRequestsUISettings\"><![CDATA[{\r\n  \"selectedUrlAndAccountId\": {\r\n    \"url\": \"https://github.com/Norbertho/laravel-7-bulma-frontend-preset.git\",\r\n    \"accountId\": \"c89d45d3-6f2a-40a3-9c04-36ca7bc72e91\"\r\n  }\r\n}]]></component>\r\n  <component name=\"PhpWorkspaceProjectConfiguration\" interpreter_name=\"PHP\">\r\n    <include_path>\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-php72\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-intl-idn\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-php73\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/http-kernel\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-php80\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/finder\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/routing\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/event-dispatcher\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/inflector\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/css-selector\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/composer\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/doctrine/lexer\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/error-handler\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-ctype\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-mbstring\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-intl-grapheme\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/event-dispatcher-contracts\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/http-foundation\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/psr/container\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/psr/event-dispatcher\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/psr/log\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/dragonmantank/cron-expression\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/tijsverkoyen/css-to-inline-styles\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/phpoption/phpoption\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/console\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/deprecation-contracts\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/vlucas/phpdotenv\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/process\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/voku/portable-ascii\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/string\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/service-contracts\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/mime\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/var-dumper\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-intl-normalizer\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/psr/simple-cache\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/brick/math\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/egulias/email-validator\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/ramsey/collection\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/ramsey/uuid\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/polyfill-iconv\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/translation-contracts\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/opis/closure\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/swiftmailer/swiftmailer\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/psr/clock\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/symfony/translation\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/monolog/monolog\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/nesbot/carbon\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/league/flysystem\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/league/commonmark\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/league/mime-type-detection\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/laravel/framework\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/carbonphp/carbon-doctrine-types\" />\r\n      <path value=\"$PROJECT_DIR$/vendor/laravel/ui\" />\r\n    </include_path>\r\n  </component>\r\n  <component name=\"ProjectColorInfo\"><![CDATA[{\r\n  \"associatedIndex\": 4\r\n}]]></component>\r\n  <component name=\"ProjectId\" id=\"2f5Uy54MVzoHTsnZrRqAABin9Xh\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"PHP Script.index.php.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.laravel-idea.search-composer-json\": \"true\",\r\n    \"git-widget-placeholder\": \"master\",\r\n    \"last_opened_file_path\": \"C:/Users/User/PhpstormProjects/TestMovieRama\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\User\\PhpstormProjects\\TestMovieRama\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-1d06a55b98c1-74d2a5396914-JavaScript-PS-241.14494.237\" />\r\n        <option value=\"bundled-php-predefined-ba97393d7c68-8f0632a2a215-com.jetbrains.php.sharedIndexes-PS-241.14494.237\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"4af7b86c-05a0-4a39-90f5-50e2508fa1b2\" name=\"Changes\" comment=\"\" />\r\n      <created>1713090683223</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1713090683223</updated>\r\n      <workItem from=\"1713090685986\" duration=\"302000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/.idea/workspace.xml	(date 1713092058989)
@@ -1,8 +1,11 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
   <component name="ChangeListManager">
-    <list default="true" id="4af7b86c-05a0-4a39-90f5-50e2508fa1b2" name="Changes" comment="">
-      <change beforePath="$PROJECT_DIR$/src/bulma-stubs/bootstrap.js" beforeDir="false" />
+    <list default="true" id="4af7b86c-05a0-4a39-90f5-50e2508fa1b2" name="Changes" comment="test">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -91,6 +94,7 @@
   "associatedIndex": 4
 }]]></component>
   <component name="ProjectId" id="2f5Uy54MVzoHTsnZrRqAABin9Xh" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
@@ -102,7 +106,12 @@
     "RunOnceActivity.laravel-idea.search-composer-json": "true",
     "git-widget-placeholder": "master",
     "last_opened_file_path": "C:/Users/User/PhpstormProjects/TestMovieRama",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
     "nodejs_package_manager_path": "npm",
+    "settings.editor.selected.configurable": "reference.webide.settings.project.settings.php.composer",
     "vue.rearranger.settings.migration": "true"
   }
 }]]></component>
@@ -127,11 +136,47 @@
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
       <updated>1713090683223</updated>
-      <workItem from="1713090685986" duration="302000" />
+      <workItem from="1713090685986" duration="1364000" />
     </task>
+    <task id="LOCAL-00001" summary="test">
+      <option name="closed" value="true" />
+      <created>1713091254746</created>
+      <option name="number" value="00001" />
+      <option name="presentableId" value="LOCAL-00001" />
+      <option name="project" value="LOCAL" />
+      <updated>1713091254746</updated>
+    </task>
+    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
     <option name="version" value="3" />
   </component>
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State>
+              <option name="FILTERS">
+                <map>
+                  <entry key="branch">
+                    <value>
+                      <list>
+                        <option value="github/master" />
+                      </list>
+                    </value>
+                  </entry>
+                </map>
+              </option>
+            </State>
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
+  <component name="VcsManagerConfiguration">
+    <MESSAGE value="test" />
+    <option name="LAST_COMMIT_MESSAGE" value="test" />
+  </component>
 </project>
\ No newline at end of file
Index: resources/controllers/UserMovieController.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\r\n\r\nrequire_once __DIR__ . '/../models/UserMovieModel.php';\r\n\r\nclass UserMovieController {\r\n    public function getUserMovies($userId) {\r\n        // Instantiate the model\r\n        $userMovieModel = new UserMovieModel();\r\n\r\n        // Get user movies from the model\r\n        return $userMovieModel->getUserMovies($userId);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/resources/controllers/UserMovieController.php b/resources/controllers/UserMovieController.php
--- a/resources/controllers/UserMovieController.php	(revision 55c0cc63aae55f3e316ce8713f5d858f4d30255a)
+++ b/resources/controllers/UserMovieController.php	(date 1713092538216)
@@ -4,10 +4,7 @@
 
 class UserMovieController {
     public function getUserMovies($userId) {
-        // Instantiate the model
         $userMovieModel = new UserMovieModel();
-
-        // Get user movies from the model
         return $userMovieModel->getUserMovies($userId);
     }
 }
